import{_ as a,c as e,o as t,a1 as o}from"./chunks/framework.DCKU21so.js";const m=JSON.parse('{"title":"开发规范","description":"","frontmatter":{},"headers":[],"relativePath":"docs/dev/index.md","filePath":"docs/dev/index.md"}'),i={name:"docs/dev/index.md"},s=o(`<h1 id="开发规范" tabindex="-1">开发规范 <a class="header-anchor" href="#开发规范" aria-label="Permalink to &quot;开发规范&quot;">​</a></h1><h2 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-label="Permalink to &quot;命名规范&quot;">​</a></h2><h3 id="项目命名" tabindex="-1">项目命名 <a class="header-anchor" href="#项目命名" aria-label="Permalink to &quot;项目命名&quot;">​</a></h3><p><strong>全部采用小写，中间用横岗分割，例如：</strong><code>my-project-name</code></p><h3 id="组件命名" tabindex="-1">组件命名 <a class="header-anchor" href="#组件命名" aria-label="Permalink to &quot;组件命名&quot;">​</a></h3><ul><li><strong>组件文件夹全部使用小写：</strong><code>components</code></li><li><strong>组件名称使用****大驼峰命名</strong>，例如：<code>ComponentName.vue</code></li><li><strong>组件文件的上层文件夹使用大驼峰命名，例如：</strong><code>components/ComponentName/ComponentName.vue</code></li><li><strong>引用时也应当遵守大驼峰命名</strong><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ComponentName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/components/ComponentName/ComponentName.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ComponentName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><h3 id="页面命名" tabindex="-1">页面命名 <a class="header-anchor" href="#页面命名" aria-label="Permalink to &quot;页面命名&quot;">​</a></h3><p><strong>页面文件夹全部使用小写，例如：</strong><code>pages</code>, <code>views</code></p><p><strong>页面名称使用小驼峰命名，例如：</strong><code>pageName.vue</code></p><p><strong>页面文件夹应遵守小驼峰命名，例如：</strong><code>pageName/pageName.vue</code></p><h3 id="api命名" tabindex="-1">Api命名 <a class="header-anchor" href="#api命名" aria-label="Permalink to &quot;Api命名&quot;">​</a></h3><p><strong>api文件使用小驼峰命名，例如：</strong><code>apiModule.js</code></p><h3 id="hook命名" tabindex="-1">Hook命名 <a class="header-anchor" href="#hook命名" aria-label="Permalink to &quot;Hook命名&quot;">​</a></h3><ul><li><strong>文件命名使用小驼峰命名，use开头+模块名称，例如：useLogin.js</strong></li><li><strong>文件内可以包含多个hook方法, hook方法名称以use开头，使用export导出</strong></li></ul><h3 id="变量命名" tabindex="-1">变量命名 <a class="header-anchor" href="#变量命名" aria-label="Permalink to &quot;变量命名&quot;">​</a></h3><p><strong>变量使用小驼峰命名，例如：</strong><code>const userName = &quot;hello&quot;</code></p><h2 id="git规范" tabindex="-1">Git规范 <a class="header-anchor" href="#git规范" aria-label="Permalink to &quot;Git规范&quot;">​</a></h2><h3 id="分支命名" tabindex="-1">分支命名 <a class="header-anchor" href="#分支命名" aria-label="Permalink to &quot;分支命名&quot;">​</a></h3><h4 id="主分支" tabindex="-1">主分支 <a class="header-anchor" href="#主分支" aria-label="Permalink to &quot;主分支&quot;">​</a></h4><ul><li><strong>master</strong>：主分支</li><li><strong>develop</strong>：开发分支</li></ul><h4 id="临时分支" tabindex="-1">临时分支 <a class="header-anchor" href="#临时分支" aria-label="Permalink to &quot;临时分支&quot;">​</a></h4><ul><li><strong>功能分支：feature开头 + 功能名称，例如：</strong><code>feature/name</code></li><li><strong>Bug分支：fix开头 + / + bug名称，例如：</strong><code>fix/name</code></li></ul><h3 id="开发新功能" tabindex="-1">开发新功能 <a class="header-anchor" href="#开发新功能" aria-label="Permalink to &quot;开发新功能&quot;">​</a></h3><ul><li><strong>开发新功能首先应当以****develop分支</strong>为基准新建一个单独的分支进行开发，分支命名遵守<strong>功能分支</strong>命名规则</li><li><strong>开发结束后要拉取开发主分支的代码进行合并冲突</strong></li><li><strong>冲突解决后将当前分支合并进开发分支</strong></li><li><strong>最后删除当前功能开发分支</strong></li></ul><h3 id="修复bug" tabindex="-1">修复Bug <a class="header-anchor" href="#修复bug" aria-label="Permalink to &quot;修复Bug&quot;">​</a></h3><p><strong>如果是小bug修改时不影响其他功能可以在当前分支解决，解决后提交代码即可</strong></p><p><strong>如果是比较严重的bug，可能会影响其他功能的需要按下面的bug修复流程解决</strong></p><ul><li><strong>修复bug应以当前bug所在的分支为基准（master或devleop）创建新的bug分支进行解决，bug分支命名遵守****Bug分支</strong>命名规则，</li><li><strong>解决后拉取原分支代码进行合并冲突</strong></li><li><strong>冲突合并好以后将bug分支合进原分支</strong></li><li><strong>最后删除当前bug分支</strong></li></ul><h3 id="提交commit" tabindex="-1">提交Commit <a class="header-anchor" href="#提交commit" aria-label="Permalink to &quot;提交Commit&quot;">​</a></h3><p><strong>提交commit时应在描述前面加上类型关键字</strong></p><p><strong>commit描述内容：类型: + 描述，例如：</strong><code>fix：修复xxxxbug问题</code>, fix就是代表为解决bug的类型关键字</p><h4 id="commit类型" tabindex="-1">Commit类型 <a class="header-anchor" href="#commit类型" aria-label="Permalink to &quot;Commit类型&quot;">​</a></h4><ul><li><strong>feat：新功能（feature）</strong></li><li><strong>fix: 修复bug</strong></li><li><strong>docs：修改文档</strong></li><li><strong>style：调整代码格式</strong></li><li><strong>refactor：代码重构，没有添加其他新功能或修复bug</strong></li><li><strong>perf：性能优化</strong></li><li><strong>test：测试</strong></li><li><strong>chore： 修改构建流程、增加依赖库</strong></li><li><strong>revert：回滚代码</strong></li></ul><h2 id="开发环境" tabindex="-1">开发环境 <a class="header-anchor" href="#开发环境" aria-label="Permalink to &quot;开发环境&quot;">​</a></h2><h3 id="本地环境" tabindex="-1">本地环境 <a class="header-anchor" href="#本地环境" aria-label="Permalink to &quot;本地环境&quot;">​</a></h3><ul><li><strong>Node &gt;=18</strong></li><li><strong>pnpm</strong></li></ul><h3 id="推荐ide" tabindex="-1">推荐IDE <a class="header-anchor" href="#推荐ide" aria-label="Permalink to &quot;推荐IDE&quot;">​</a></h3><ul><li><a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">VsCode</a></li></ul><h3 id="扩展" tabindex="-1">扩展 <a class="header-anchor" href="#扩展" aria-label="Permalink to &quot;扩展&quot;">​</a></h3><ul><li><strong>Vue - Official：Vue官方扩展</strong></li></ul>`,40),n=[s];function r(l,h,d,g,c,u){return t(),e("div",null,n)}const k=a(i,[["render",r]]);export{m as __pageData,k as default};
