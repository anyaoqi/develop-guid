import{_ as a,c as e,o as t,a1 as i}from"./chunks/framework.Dtl2lYvd.js";const b=JSON.parse('{"title":"Git规范","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Git规范.md","filePath":"docs/Git规范.md"}'),o={name:"docs/Git规范.md"},l=i('<h1 id="git规范" tabindex="-1">Git规范 <a class="header-anchor" href="#git规范" aria-label="Permalink to &quot;Git规范&quot;">​</a></h1><h2 id="分支命名" tabindex="-1">分支命名 <a class="header-anchor" href="#分支命名" aria-label="Permalink to &quot;分支命名&quot;">​</a></h2><h3 id="主分支" tabindex="-1">主分支 <a class="header-anchor" href="#主分支" aria-label="Permalink to &quot;主分支&quot;">​</a></h3><p><strong>master</strong>：主分支</p><p><strong>develop</strong>：开发分支</p><h3 id="临时分支" tabindex="-1">临时分支 <a class="header-anchor" href="#临时分支" aria-label="Permalink to &quot;临时分支&quot;">​</a></h3><ul><li>功能分支：feature开头 + 功能名称，例如：<code>feature/name</code></li><li>Bug分支：fix开头 + / + bug名称，例如：<code>fix/name</code></li></ul><h2 id="开发新功能" tabindex="-1">开发新功能 <a class="header-anchor" href="#开发新功能" aria-label="Permalink to &quot;开发新功能&quot;">​</a></h2><ul><li>开发新功能首先应当以<strong>develop分支</strong>为基准新建一个单独的分支进行开发，分支命名遵守<strong>功能分支</strong>命名规则</li><li>开发结束后要拉取开发主分支的代码进行合并冲突</li><li>冲突解决后将当前分支合并进开发分支</li><li>最后删除当前功能开发分支</li></ul><h2 id="修复bug" tabindex="-1">修复Bug <a class="header-anchor" href="#修复bug" aria-label="Permalink to &quot;修复Bug&quot;">​</a></h2><p>如果是小bug修改时不影响其他功能可以在当前分支解决，解决后提交代码即可</p><p>如果是比较严重的bug，可能会影响其他功能的需要按下面的bug修复流程解决</p><ul><li>修复bug应以当前bug所在的分支为基准（master或devleop）创建新的bug分支进行解决，bug分支命名遵守<strong>Bug分支</strong>命名规则，</li><li>解决后拉取原分支代码进行合并冲突</li><li>冲突合并好以后将bug分支合进原分支</li><li>最后删除当前bug分支</li></ul><h2 id="提交commit" tabindex="-1">提交Commit <a class="header-anchor" href="#提交commit" aria-label="Permalink to &quot;提交Commit&quot;">​</a></h2><p>提交commit时应在描述前面加上类型关键字</p><p>commit描述内容：类型: + 描述，例如：<code>fix：修复xxxxbug问题</code>, fix就是代表为解决bug的类型关键字</p><h3 id="commit类型" tabindex="-1">Commit类型 <a class="header-anchor" href="#commit类型" aria-label="Permalink to &quot;Commit类型&quot;">​</a></h3><p>*<strong>feat：新功能（feature）</strong></p><p>*<strong>fix: 修复bug</strong></p><ul><li>docs：修改文档</li><li>style：调整代码格式</li><li>refactor：代码重构，没有添加其他新功能或修复bug</li><li>perf：性能优化</li><li>test：测试</li><li>chore： 修改构建流程、增加依赖库</li><li>revert：回滚代码</li></ul>',20),r=[l];function s(n,c,u,d,h,m){return t(),e("div",null,r)}const p=a(o,[["render",s]]);export{b as __pageData,p as default};
